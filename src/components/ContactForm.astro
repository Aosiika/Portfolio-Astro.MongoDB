// Importamos la URL de la API desde la configuración
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';

<section id="contacto" class="py-16 bg-gray-50 dark:bg-gray-800">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl font-bold text-center mb-8 text-gray-800 dark:text-white">Contacto</h2>
    
    <div class="max-w-lg mx-auto">
      <form id="contactForm" class="space-y-6 bg-white dark:bg-gray-700 p-6 rounded-lg shadow-lg">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Nombre
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
          />
        </div>

        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
          />
        </div>

        <div>
          <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Asunto
          </label>
          <input
            type="text"
            id="subject"
            name="subject"
            placeholder="Escribe el asunto de tu mensaje"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
          />
        </div>

        <div>
          <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Mensaje
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
          ></textarea>
        </div>

        <div class="flex justify-end">
          <button
            type="submit"
            class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
          >
            Enviar mensaje
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed top-4 right-4 z-50 hidden">
    <div class="bg-white dark:bg-gray-700 rounded-lg shadow-lg p-4 max-w-md transform transition-all duration-300 scale-90 opacity-0" id="toastContent">
      <div class="flex items-center">
        <div id="toastIcon" class="flex-shrink-0 w-8 h-8 mr-3 rounded-full flex items-center justify-center"></div>
        <div class="flex-1">
          <h3 id="toastTitle" class="font-medium text-lg"></h3>
          <p id="toastMessage" class="text-sm text-gray-500 dark:text-gray-300"></p>
        </div>
        <button id="closeToast" class="ml-4 text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-100">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</section>

<script>
// Definimos la URL de la API
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('contactForm');
  
  // Función para mostrar notificaciones toast
  function showToast(title: string, message: string, type: 'success' | 'error' = 'success') {
    const toast = document.getElementById('toast');
    const toastContent = document.getElementById('toastContent');
    const toastTitle = document.getElementById('toastTitle');
    const toastMessage = document.getElementById('toastMessage');
    const toastIcon = document.getElementById('toastIcon');
    
    if (toast && toastContent && toastTitle && toastMessage && toastIcon) {
      // Configurar el contenido
      toastTitle.textContent = title;
      toastMessage.textContent = message;
      
      // Configurar el icono según el tipo
      if (type === 'success') {
        toastIcon.className = 'flex-shrink-0 w-8 h-8 mr-3 rounded-full flex items-center justify-center bg-green-100';
        toastIcon.innerHTML = `
          <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
        `;
        toastTitle.className = 'font-medium text-lg text-green-600 dark:text-green-400';
      } else {
        toastIcon.className = 'flex-shrink-0 w-8 h-8 mr-3 rounded-full flex items-center justify-center bg-red-100';
        toastIcon.innerHTML = `
          <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        `;
        toastTitle.className = 'font-medium text-lg text-red-600 dark:text-red-400';
      }
      
      // Mostrar el toast
      toast.classList.remove('hidden');
      
      // Animar la entrada
      toastContent.style.opacity = '0';
      toastContent.style.transform = 'scale(0.9)';
      
      setTimeout(() => {
        toastContent.style.opacity = '1';
        toastContent.style.transform = 'scale(1)';
      }, 10);
      
      // Configurar el cierre automático
      setTimeout(() => {
        closeToast();
      }, 5000);
    }
  }
  
  function closeToast() {
    const toast = document.getElementById('toast');
    const toastContent = document.getElementById('toastContent');
    
    if (toast && toastContent) {
      toastContent.style.opacity = '0';
      toastContent.style.transform = 'scale(0.9)';
      
      setTimeout(() => {
        toast.classList.add('hidden');
      }, 300);
    }
  }
  
  // Configurar el botón de cierre del toast
  const closeToastBtn = document.getElementById('closeToast');
  if (closeToastBtn) {
    closeToastBtn.addEventListener('click', closeToast);
  }
  
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formElement = e.target;
      if (!(formElement instanceof HTMLFormElement)) return;
      
      const formData = new FormData(formElement);
      const data = {
        name: formData.get('name'),
        email: formData.get('email'),
        subject: formData.get('subject'),
        message: formData.get('message')
      };
      
      try {
        console.log('Enviando mensaje a:', `${API_URL}/messages`);
        console.log('Datos:', data);
        
        const response = await fetch(`${API_URL}/messages`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const responseData = await response.json();
        
        if (!response.ok) {
          console.error('Error en la respuesta:', responseData);
          throw new Error(responseData.message || 'Error al enviar el mensaje');
        }
        
        console.log('Respuesta exitosa:', responseData);
        
        showToast(
          '¡Mensaje enviado!',
          'Gracias por tu mensaje. Te responderemos lo antes posible.',
          'success'
        );
        
        formElement.reset();
      } catch (err) {
        console.error('Error al enviar el mensaje:', err);
        const error = err instanceof Error ? err : new Error('Error desconocido');
        showToast(
          'Error',
          error.message || 'Hubo un problema al enviar el mensaje. Por favor, intenta de nuevo.',
          'error'
        );
      }
    });
  }
});
</script>

<style>
  input, textarea {
    @apply dark:bg-gray-600 dark:border-gray-500 dark:text-white;
  }
  
  input::placeholder, textarea::placeholder {
    @apply dark:text-gray-400;
  }
  
  .toast-enter {
    opacity: 0;
    transform: scale(0.9);
  }
  
  .toast-enter-active {
    opacity: 1;
    transform: scale(1);
    transition: opacity 300ms, transform 300ms;
  }
  
  .toast-exit {
    opacity: 1;
  }
  
  .toast-exit-active {
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 300ms, transform 300ms;
  }
</style> 