---
import AdminLayout from '../../layouts/AdminLayout.astro';
// Definimos la URL de la API directamente para evitar problemas de importación
const API_URL = 'http://localhost:5000/api';
// Esta página requiere autenticación, el middleware se encargará de redirigir si no hay sesión
---
<AdminLayout title="Editar Perfil - Admin Panel">
  <!-- Notificación -->
  <div id="notification" class="fixed top-4 right-4 p-4 rounded-lg shadow-lg hidden transition-all duration-300 z-50">
    <p id="notification-message" class="text-gray-800 dark:text-gray-200"></p>
  </div>

  <div class="container px-6 mx-auto">
    <!-- Encabezado con gradiente -->
    <div class="mb-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl shadow-lg p-6 text-white">
      <div class="flex flex-col md:flex-row items-center justify-between">
        <div class="mb-4 md:mb-0">
          <h2 class="text-2xl font-bold mb-2">Editar Perfil</h2>
          <p class="text-blue-100">Actualiza tu información personal y credenciales de acceso.</p>
        </div>
        <div class="flex space-x-2">
          <a
            href="/"
            target="_blank"
            class="px-4 py-2 bg-white text-blue-600 rounded-lg shadow hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
              <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
            </svg>
            Ver sitio
          </a>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <!-- Columna izquierda: Foto de perfil -->
      <div class="md:col-span-1">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 hover-card border-l-4 border-blue-500">
          <div class="flex flex-col items-center">
            <div class="relative group">
              <div class="w-32 h-32 rounded-full overflow-hidden border-4 border-white dark:border-gray-700 shadow-lg mb-4">
                <img 
                  id="profileImagePreview" 
                  src="https://images.unsplash.com/photo-1568602471122-7832951cc4c5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" 
                  alt="Foto de perfil" 
                  class="w-full h-full object-cover"
                >
              </div>
              <div class="absolute inset-0 bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 flex items-center justify-center transition-all duration-300">
                <label for="profileImageInput" class="cursor-pointer text-white p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </label>
                <input type="file" id="profileImageInput" class="hidden" accept="image/*">
              </div>
            </div>
            <h3 id="userName" class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-1">Nombre de Usuario</h3>
            <p id="userEmail" class="text-gray-500 dark:text-gray-400 mb-4">usuario@ejemplo.com</p>
            
            <div class="w-full mt-4">
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Completado del perfil</span>
                <span id="profileCompletionPercent" class="text-sm font-medium text-blue-600 dark:text-blue-400">80%</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div id="profileCompletionBar" class="bg-gradient-to-r from-blue-500 to-purple-600 h-2.5 rounded-full" style="width: 80%"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Columna derecha: Formularios -->
      <div class="md:col-span-2">
        <!-- Información Personal -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 hover-card border-l-4 border-purple-500 mb-6">
          <div class="flex items-center mb-6">
            <div class="p-3 rounded-full bg-gradient-to-br from-purple-400 to-purple-600 mr-4 shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200">
              Información Personal
            </h3>
          </div>
          
          <form id="personalInfoForm" class="grid gap-6 md:grid-cols-2">
            <div>
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Nombre</span>
                <div class="relative mt-2">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-user"></i>
                  </div>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="Tu nombre"
                  />
                </div>
              </label>
            </div>
            <div>
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Email</span>
                <div class="relative mt-2">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-envelope"></i>
                  </div>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="tu@email.com"
                  />
                </div>
              </label>
            </div>
            <div class="md:col-span-2">
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Biografía</span>
                <div class="relative mt-2">
                  <div class="absolute top-3 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-file-alt"></i>
                  </div>
                  <textarea
                    id="bio"
                    name="bio"
                    rows="3"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="Cuéntanos un poco sobre ti..."
                  ></textarea>
                </div>
              </label>
            </div>
            <div class="md:col-span-2 flex justify-end">
              <button
                type="submit"
                class="px-6 py-3 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Guardar Información Personal
              </button>
            </div>
          </form>
        </div>

        <!-- Cambiar Contraseña -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 hover-card border-l-4 border-green-500">
          <div class="flex items-center mb-6">
            <div class="p-3 rounded-full bg-gradient-to-br from-green-400 to-green-600 mr-4 shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200">
              Cambiar Contraseña
            </h3>
          </div>
          
          <form id="passwordForm" class="grid gap-6">
            <div>
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Contraseña Actual</span>
                <div class="relative mt-2">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-lock"></i>
                  </div>
                  <input
                    type="password"
                    id="currentPassword"
                    name="currentPassword"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="••••••••"
                  />
                </div>
              </label>
            </div>
            <div>
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Nueva Contraseña</span>
                <div class="relative mt-2">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-key"></i>
                  </div>
                  <input
                    type="password"
                    id="newPassword"
                    name="newPassword"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="••••••••"
                  />
                </div>
              </label>
            </div>
            <div>
              <label class="block mb-2">
                <span class="text-gray-700 dark:text-gray-400 text-base font-medium">Confirmar Nueva Contraseña</span>
                <div class="relative mt-2">
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                    <i class="fas fa-key"></i>
                  </div>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    class="block w-full pl-10 pr-3 py-3 text-base rounded-lg border-b-2 border-gray-300 dark:border-gray-600 bg-transparent dark:bg-gray-700 focus:border-blue-500 focus:outline-none dark:text-gray-300 transition-all duration-300"
                    placeholder="••••••••"
                  />
                </div>
              </label>
            </div>
            <div class="flex justify-end">
              <button
                type="submit"
                class="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Actualizar Contraseña
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Definimos la URL de la API directamente en el script
    const API_URL = 'http://localhost:5000/api';
    
    document.addEventListener('DOMContentLoaded', async () => {
      const notification = document.getElementById('notification');
      const notificationMessage = document.getElementById('notification-message');
      const personalInfoForm = document.getElementById('personalInfoForm') as HTMLFormElement;
      const passwordForm = document.getElementById('passwordForm') as HTMLFormElement;
      const profileImageInput = document.getElementById('profileImageInput') as HTMLInputElement;
      const profileImagePreview = document.getElementById('profileImagePreview') as HTMLImageElement;
      const userName = document.getElementById('userName');
      const userEmail = document.getElementById('userEmail');
      const profileCompletionBar = document.getElementById('profileCompletionBar') as HTMLDivElement;
      const profileCompletionPercent = document.getElementById('profileCompletionPercent');

      // Función para mostrar notificaciones
      function showNotification(message: string, type: 'success' | 'error' | 'info'): void {
        if (!notification || !notificationMessage) return;
        
        notificationMessage.textContent = message;
        
        // Establecer colores según el tipo
        if (type === 'success') {
          notification.className = 'fixed top-4 right-4 p-4 rounded-lg shadow-lg bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-100 z-50 animate-fade-in';
        } else if (type === 'error') {
          notification.className = 'fixed top-4 right-4 p-4 rounded-lg shadow-lg bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-100 z-50 animate-fade-in';
        } else {
          notification.className = 'fixed top-4 right-4 p-4 rounded-lg shadow-lg bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-100 z-50 animate-fade-in';
        }
        
        notification.classList.remove('hidden');
        
        // Ocultar después de 3 segundos
        setTimeout(() => {
          notification.classList.add('hidden');
        }, 3000);
      }

      // Cargar datos del usuario
      async function loadUserProfile(): Promise<void> {
        try {
          const token = localStorage.getItem('token');
          if (!token) {
            showNotification('No hay sesión activa', 'error');
            setTimeout(() => {
              window.location.href = '/admin/login';
            }, 2000);
            return;
          }
          
          const response = await fetch(`${API_URL}/users/profile`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            
            // Actualizar formulario con datos del usuario
            const nameInput = document.getElementById('name') as HTMLInputElement;
            if (nameInput) {
              nameInput.value = data.user?.name || data._id?.name || '';
            }
            
            const emailInput = document.getElementById('email') as HTMLInputElement;
            if (emailInput) {
              emailInput.value = data.user?.email || data._id?.email || '';
            }
            
            const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
            if (bioInput) {
              bioInput.value = data.user?.bio || data._id?.bio || '';
            }
            
            // Actualizar información en la tarjeta de perfil
            if (userName) {
              userName.textContent = data.user?.name || data._id?.name || 'Usuario';
            }
            
            if (userEmail) {
              userEmail.textContent = data.user?.email || data._id?.email || 'usuario@ejemplo.com';
            }
            
            // Si hay imagen de perfil, actualizarla
            if ((data.user?.profileImage || data._id?.profileImage) && profileImagePreview) {
              profileImagePreview.src = data.user?.profileImage || data._id?.profileImage;
            }
            
            // Calcular completitud del perfil
            const userData = data.user || data._id || {};
            calculateProfileCompletion(userData);
          } else {
            const errorData = await response.json();
            showNotification(errorData.message || 'Error al cargar el perfil', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showNotification('Error al cargar el perfil', 'error');
        }
      }
      
      // Calcular y actualizar la barra de completitud del perfil
      function calculateProfileCompletion(user: any): void {
        if (!profileCompletionBar || !profileCompletionPercent) return;
        
        const fields = ['name', 'email', 'bio', 'profileImage'];
        const filledFields = fields.filter(field => user[field] && user[field].trim && user[field].trim() !== '').length;
        const percentage = Math.round((filledFields / fields.length) * 100);
        
        profileCompletionBar.style.width = `${percentage}%`;
        profileCompletionPercent.textContent = `${percentage}%`;
      }
      
      // Manejar cambio de imagen de perfil
      if (profileImageInput) {
        profileImageInput.addEventListener('change', async (e) => {
          const target = e.target as HTMLInputElement;
          const file = target.files?.[0];
          if (!file) return;
          
          // Mostrar vista previa
          const reader = new FileReader();
          reader.onload = (e) => {
            if (profileImagePreview && e.target) {
              profileImagePreview.src = e.target.result as string;
            }
          };
          reader.readAsDataURL(file);
          
          // Subir imagen
          const formData = new FormData();
          formData.append('profileImage', file);
          
          try {
            const response = await fetch(`${API_URL}/users/profile/image`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
              },
              body: formData
            });
            
            if (response.ok) {
              showNotification('Imagen de perfil actualizada', 'success');
              loadUserProfile(); // Recargar perfil para actualizar completitud
            } else {
              const errorData = await response.json();
              showNotification(errorData.message || 'Error al actualizar la imagen', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Error al actualizar la imagen', 'error');
          }
        });
      }
      
      // Manejar envío del formulario de información personal
      if (personalInfoForm) {
        personalInfoForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const nameInput = document.getElementById('name') as HTMLInputElement;
          const emailInput = document.getElementById('email') as HTMLInputElement;
          const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
          
          const formData = {
            name: nameInput?.value || '',
            email: emailInput?.value || '',
            bio: bioInput?.value || ''
          };
          
          try {
            const response = await fetch(`${API_URL}/users/profile`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
              },
              body: JSON.stringify(formData)
            });
            
            if (response.ok) {
              showNotification('Información personal actualizada', 'success');
              loadUserProfile(); // Recargar perfil
            } else {
              const data = await response.json();
              showNotification(data.message || 'Error al actualizar la información', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Error al actualizar la información', 'error');
          }
        });
      }
      
      // Manejar envío del formulario de cambio de contraseña
      if (passwordForm) {
        passwordForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const currentPasswordInput = document.getElementById('currentPassword') as HTMLInputElement;
          const newPasswordInput = document.getElementById('newPassword') as HTMLInputElement;
          const confirmPasswordInput = document.getElementById('confirmPassword') as HTMLInputElement;
          
          const currentPassword = currentPasswordInput?.value || '';
          const newPassword = newPasswordInput?.value || '';
          const confirmPassword = confirmPasswordInput?.value || '';
          
          // Validar que las contraseñas coincidan
          if (newPassword !== confirmPassword) {
            showNotification('Las contraseñas no coinciden', 'error');
            return;
          }
          
          // Validar longitud mínima
          if (newPassword.length < 6) {
            showNotification('La contraseña debe tener al menos 6 caracteres', 'error');
            return;
          }
          
          try {
            const response = await fetch(`${API_URL}/users/profile/password`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
              },
              body: JSON.stringify({
                currentPassword,
                newPassword
              })
            });
            
            if (response.ok) {
              showNotification('Contraseña actualizada correctamente', 'success');
              passwordForm.reset();
            } else {
              const data = await response.json();
              showNotification(data.message || 'Error al actualizar la contraseña', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Error al actualizar la contraseña', 'error');
          }
        });
      }
      
      // Cargar perfil al iniciar
      loadUserProfile();
    });
  </script>

  <style>
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out forwards;
    }
    
    .hover-card {
      transition: all 0.3s ease;
    }
    .hover-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
  </style>
</AdminLayout> 