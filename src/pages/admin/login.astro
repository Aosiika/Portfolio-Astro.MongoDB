---
import AdminLoginLayout from '../../layouts/AdminLoginLayout.astro';

// Verificar si estamos en desarrollo o producción
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
---

<AdminLoginLayout title="Login - Admin Panel">
  <div class="flex min-h-screen items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 p-4">
    <div class="w-full max-w-md overflow-hidden bg-white dark:bg-gray-800 rounded-2xl shadow-2xl transform transition-all duration-300 hover:scale-[1.01]">
      <!-- Cabecera con logo y título -->
      <div class="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-center">
        <div class="w-16 h-16 mx-auto bg-white rounded-full flex items-center justify-center shadow-lg mb-4">
          <i class="fas fa-code text-2xl text-blue-600"></i>
        </div>
        <h1 class="text-2xl font-bold text-white">Panel Administrativo</h1>
        <p class="text-blue-100 mt-1">Acceso exclusivo para administradores</p>
      </div>

      <!-- Formulario de login -->
      <div class="p-8">
        <form id="login-form" class="space-y-5">
          <!-- Campo de email -->
          <div class="group">
            <div class="relative">
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                <i class="fas fa-envelope"></i>
              </div>
              <input 
                id="email" 
                name="email" 
                type="email" 
                autocomplete="email" 
                required
                placeholder="Correo electrónico"
                class="w-full pl-10 pr-3 py-3 border-b-2 border-gray-300 dark:border-gray-600 bg-transparent text-gray-700 dark:text-gray-200 focus:outline-none focus:border-blue-500 transition-all duration-300"
              >
            </div>
          </div>

          <!-- Campo de contraseña -->
          <div class="group">
            <div class="relative">
              <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 dark:text-gray-500">
                <i class="fas fa-lock"></i>
              </div>
              <input 
                id="password" 
                name="password" 
                type="password" 
                autocomplete="current-password" 
                required
                placeholder="Contraseña"
                class="w-full pl-10 pr-10 py-3 border-b-2 border-gray-300 dark:border-gray-600 bg-transparent text-gray-700 dark:text-gray-200 focus:outline-none focus:border-blue-500 transition-all duration-300"
              >
              <button 
                type="button" 
                id="toggle-password"
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors duration-200"
              >
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>

          <!-- Recordar datos -->
          <div class="flex items-center">
            <input 
              id="remember-me" 
              name="remember-me" 
              type="checkbox"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600"
            >
            <label for="remember-me" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
              Recordar mis datos
            </label>
          </div>

          <!-- Botón de login -->
          <div>
            <button 
              type="submit"
              class="w-full py-3 px-4 rounded-lg text-white font-medium bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform transition-all duration-300 hover:scale-[1.02] shadow-lg hover:shadow-xl"
            >
              <span class="flex items-center justify-center">
                <i class="fas fa-sign-in-alt mr-2"></i>
                Iniciar sesión
              </span>
            </button>
          </div>
        </form>

        <!-- Notificación -->
        <div id="notification" class="mt-6 p-4 rounded-lg hidden transform transition-all duration-300 scale-95 opacity-0">
          <div class="flex items-center">
            <i id="notification-icon" class="fas mr-3 text-lg"></i>
            <p id="notification-text" class="text-sm"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLoginLayout>

<script>
  // Constantes
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
  
  // Elementos del DOM
  const loginForm = document.getElementById('login-form') as HTMLFormElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const togglePasswordBtn = document.getElementById('toggle-password') as HTMLButtonElement;
  const notification = document.getElementById('notification');
  const notificationText = document.getElementById('notification-text');
  const notificationIcon = document.getElementById('notification-icon');
  const rememberMeCheckbox = document.getElementById('remember-me') as HTMLInputElement;
  
  // Cargar credenciales guardadas
  document.addEventListener('DOMContentLoaded', () => {
    const savedEmail = localStorage.getItem('saved_email');
    if (savedEmail && emailInput) {
      emailInput.value = savedEmail;
      if (rememberMeCheckbox) rememberMeCheckbox.checked = true;
    }
  });
  
  // Función para mostrar notificaciones
  function showNotification(message: string, isError = false) {
    if (!notification || !notificationText || !notificationIcon) return;
    
    notification.classList.remove('hidden', 'bg-green-100', 'bg-red-100', 'text-green-800', 'text-red-800', 'scale-95', 'opacity-0');
    
    if (isError) {
      notification.classList.add('bg-red-100', 'text-red-800');
      notificationIcon.classList.add('fa-exclamation-circle', 'text-red-500');
      notificationIcon.classList.remove('fa-check-circle', 'text-green-500');
    } else {
      notification.classList.add('bg-green-100', 'text-green-800');
      notificationIcon.classList.add('fa-check-circle', 'text-green-500');
      notificationIcon.classList.remove('fa-exclamation-circle', 'text-red-500');
    }
    
    notificationText.textContent = message;
    
    // Animación de entrada
    setTimeout(() => {
      notification.classList.add('scale-100', 'opacity-100');
      notification.classList.remove('scale-95', 'opacity-0');
    }, 10);
  }
  
  // Función para alternar la visibilidad de la contraseña
  if (togglePasswordBtn) {
    togglePasswordBtn.addEventListener('click', () => {
      if (!passwordInput) return;
      
      const icon = togglePasswordBtn.querySelector('i');
      if (!icon) return;
      
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        passwordInput.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    });
  }
  
  // Verificar conexión con el backend
  async function checkBackendConnection() {
    try {
      console.log('Verificando conexión con el backend...');
      const response = await fetch(`${API_URL}/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('Estado de la respuesta:', response.status);
      const data = await response.json();
      console.log('Datos de la respuesta:', data);
      
      return response.status === 200;
    } catch (error) {
      console.error('Error al conectar con el backend:', error);
      return false;
    }
  }
  
  // Manejar envío del formulario
  if (loginForm) {
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!emailInput || !passwordInput) return;
      
      const email = emailInput.value;
      const password = passwordInput.value;
      
      // Guardar email si "recordar datos" está marcado
      if (rememberMeCheckbox && rememberMeCheckbox.checked) {
        localStorage.setItem('saved_email', email);
      } else {
        localStorage.removeItem('saved_email');
      }
      
      // Mostrar animación de carga en el botón
      const submitButton = loginForm.querySelector('button[type="submit"]') as HTMLButtonElement;
      let originalContent = '';
      
      if (submitButton) {
        originalContent = submitButton.innerHTML;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
        submitButton.disabled = true;
      }
      
      try {
        // Verificar conexión con el backend
        const isConnected = await checkBackendConnection();
        if (!isConnected) {
          showNotification('No se pudo conectar con el servidor. Por favor, inténtelo de nuevo más tarde.', true);
          if (submitButton) {
            submitButton.innerHTML = originalContent;
            submitButton.disabled = false;
          }
          return;
        }
        
        // Mostrar datos de depuración
        console.log('Intentando iniciar sesión con:', { email, password });
        
        // Enviar solicitud de login
        const response = await fetch(`${API_URL}/users/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ email, password })
        });
        
        console.log('Respuesta del servidor:', response.status);
        // Intentar obtener el cuerpo de la respuesta
        let result;
        try {
          result = await response.json();
          console.log('Datos de la respuesta:', result);
        } catch (e) {
          console.error('Error al parsear la respuesta:', e);
          showNotification('Error al procesar la respuesta del servidor', true);
          if (submitButton) {
            submitButton.innerHTML = originalContent;
            submitButton.disabled = false;
          }
          return;
        }
        
        if (!response.ok) {
          showNotification(result.message || 'Credenciales inválidas', true);
          if (submitButton) {
            submitButton.innerHTML = originalContent;
            submitButton.disabled = false;
          }
          return;
        }
       
        // Manejar diferentes formatos de respuesta
        let userData;
        let token;
        
        if (result.success && result.user && result.user.token) {
          // Formato: { success: true, user: { _id, name, email, isAdmin, token } }
          userData = {
            _id: result.user._id,
            name: result.user.name,
            email: result.user.email,
            isAdmin: result.user.isAdmin
          };
          token = result.user.token;
        } else if (result.token) {
          // Formato alternativo: { token, _id, name, email, isAdmin }
          userData = {
            _id: result._id,
            name: result.name,
            email: result.email,
            isAdmin: result.isAdmin
          };
          token = result.token;
        } else {
          console.error('Respuesta del servidor no tiene la estructura esperada:', result);
          showNotification('Error en la respuesta del servidor. Formato inesperado.', true);
          if (submitButton) {
            submitButton.innerHTML = originalContent;
            submitButton.disabled = false;
          }
          return;
        }
        
        // Guardar token y datos del usuario
        localStorage.setItem('token', token);
        localStorage.setItem('user', JSON.stringify(userData));
        
        // Mostrar notificación de éxito
        showNotification('¡Inicio de sesión exitoso! Redirigiendo...', false);
        
        // Redirigir al panel de administración
        setTimeout(() => {
          window.location.replace('/admin');
        }, 1500);
        
      } catch (error) {
        console.error('Error en el inicio de sesión:', error);
        showNotification('Ocurrió un error durante el inicio de sesión. Por favor, inténtelo de nuevo.', true);
        if (submitButton) {
          submitButton.innerHTML = originalContent;
          submitButton.disabled = false;
        }
      }
    });
  }
  
  // Verificar conexión al cargar la página
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const isConnected = await checkBackendConnection();
      if (!isConnected) {
        showNotification('No se pudo conectar con el servidor. Algunas funciones pueden no estar disponibles.', true);
      }
    } catch (error) {
      console.error('Error al verificar la conexión:', error);
    }
  });
</script> 