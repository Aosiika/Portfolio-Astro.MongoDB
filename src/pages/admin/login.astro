---
import AdminLoginLayout from '../../layouts/AdminLoginLayout.astro';

// Verificar si estamos en desarrollo o producci√≥n
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
---

<AdminLoginLayout title="Login - Admin Panel">
  <div class="flex min-h-screen items-center justify-center bg-gray-100 dark:bg-gray-900">
    <div class="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-lg dark:bg-gray-800">
      <div class="text-center">
        <h1 class="text-2xl font-bold text-blue-600 dark:text-blue-400">Panel Admin</h1>
        <h2 class="mt-2 text-xl font-semibold text-gray-900 dark:text-white">
          Iniciar sesi√≥n en su cuenta
        </h2>
      </div>

      <form id="login-form" class="space-y-6">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Correo electr√≥nico
          </label>
          <div class="mt-1">
            <input id="email" name="email" type="email" autocomplete="email" required
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
          </div>
        </div>

        <div>
          <div class="flex items-center justify-between">
            <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-200">
              Contrase√±a
            </label>
            <div class="text-sm">
              <a href="#" class="font-semibold text-blue-600 hover:text-blue-500 dark:text-blue-400">
                ¬øOlvid√≥ su contrase√±a?
              </a>
            </div>
          </div>
          <div class="mt-1 relative">
            <input id="password" name="password" type="password" autocomplete="current-password" required
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
            <button type="button" onclick="togglePasswordVisibility()"
              class="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5">
              üëÅÔ∏è
            </button>
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input id="remember-me" name="remember-me" type="checkbox"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600">
            <label for="remember-me" class="ml-2 block text-sm text-gray-900 dark:text-gray-200">
              Recordar datos
            </label>
          </div>
        </div>

        <div>
          <button type="submit"
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-blue-700 dark:hover:bg-blue-600">
            Iniciar sesi√≥n
          </button>
        </div>
      </form>

      <div id="notification" class="mt-4 p-3 rounded-md hidden">
        <p id="notification-text" class="text-sm text-center"></p>
      </div>
    </div>
  </div>
</AdminLoginLayout>

<script>
  // Constantes
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
  
  // Elementos del DOM
  const loginForm = document.getElementById('login-form') as HTMLFormElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const notification = document.getElementById('notification');
  const notificationText = document.getElementById('notification-text');
  
  // Funci√≥n para mostrar notificaciones
  function showNotification(message: string, isError = false) {
    if (!notification || !notificationText) return;
    
    notification.classList.remove('hidden', 'bg-green-100', 'bg-red-100', 'text-green-800', 'text-red-800');
    notification.classList.add(isError ? 'bg-red-100' : 'bg-green-100');
    notificationText.classList.add(isError ? 'text-red-800' : 'text-green-800');
    notificationText.textContent = message;
    notification.classList.remove('hidden');
  }
  
  // Funci√≥n para alternar la visibilidad de la contrase√±a
  function togglePasswordVisibility() {
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
    } else {
      passwordInput.type = 'password';
    }
  }
  
  // Verificar conexi√≥n con el backend
  async function checkBackendConnection() {
    try {
      console.log('Verificando conexi√≥n con el backend...');
      const response = await fetch(`${API_URL}/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('Estado de la respuesta:', response.status);
      const data = await response.json();
      console.log('Datos de la respuesta:', data);
      
      return response.status === 200;
    } catch (error) {
      console.error('Error al conectar con el backend:', error);
      return false;
    }
  }
  
  // Manejar env√≠o del formulario
  if (loginForm) {
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!emailInput || !passwordInput) return;
      
      const email = emailInput.value;
      const password = passwordInput.value;
      
      try {
        // Verificar conexi√≥n con el backend
        const isConnected = await checkBackendConnection();
        if (!isConnected) {
          showNotification('No se pudo conectar con el servidor. Por favor, int√©ntelo de nuevo m√°s tarde.', true);
          return;
        }
        
        // Mostrar datos de depuraci√≥n
        console.log('Intentando iniciar sesi√≥n con:', { email, password });
        
        // Enviar solicitud de login
        const response = await fetch(`${API_URL}/users/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ email, password })
        });
        
        console.log('Respuesta del servidor:', response.status);
        // Intentar obtener el cuerpo de la respuesta
        let result;
        try {
          result = await response.json();
          console.log('Datos de la respuesta:', result);
        } catch (e) {
          console.error('Error al parsear la respuesta:', e);
          showNotification('Error al procesar la respuesta del servidor', true);
          return;
        }
        
        if (!response.ok) {
          showNotification(result.message || 'Credenciales inv√°lidas', true);
          return;
        }
       
        // Manejar diferentes formatos de respuesta
        let userData;
        let token;
        
        if (result.success && result.user && result.user.token) {
          // Formato: { success: true, user: { _id, name, email, isAdmin, token } }
          userData = {
            _id: result.user._id,
            name: result.user.name,
            email: result.user.email,
            isAdmin: result.user.isAdmin
          };
          token = result.user.token;
        } else if (result.token) {
          // Formato alternativo: { token, _id, name, email, isAdmin }
          userData = {
            _id: result._id,
            name: result.name,
            email: result.email,
            isAdmin: result.isAdmin
          };
          token = result.token;
        } else {
          console.error('Respuesta del servidor no tiene la estructura esperada:', result);
          showNotification('Error en la respuesta del servidor. Formato inesperado.', true);
          return;
        }
        
        // Guardar token y datos del usuario
        localStorage.setItem('token', token);
        localStorage.setItem('user', JSON.stringify(userData));
        
        // Mostrar notificaci√≥n de √©xito
        showNotification('Inicio de sesi√≥n exitoso. Redirigiendo...', false);
        
        // Redirigir al panel de administraci√≥n
        setTimeout(() => {
          window.location.replace('/admin');
        }, 1000);
        
      } catch (error) {
        console.error('Error en el inicio de sesi√≥n:', error);
        showNotification('Ocurri√≥ un error durante el inicio de sesi√≥n. Por favor, int√©ntelo de nuevo.', true);
      }
    });
  }
  
  // Verificar conexi√≥n al cargar la p√°gina
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const isConnected = await checkBackendConnection();
      if (!isConnected) {
        showNotification('No se pudo conectar con el servidor. Algunas funciones pueden no estar disponibles.', true);
      }
    } catch (error) {
      console.error('Error al verificar la conexi√≥n:', error);
    }
  });
</script> 