---
import AdminLayout from '../../layouts/AdminLayout.astro';
// Eliminamos la importación de Icon que no se usa
// import { Icon } from 'astro-icon';

interface Mensaje {
  id: number;
  nombre: string;
  email: string;
  asunto: string;
  mensaje: string;
  fecha: string;
  leido: boolean;
}

// Definimos interfaces para los mensajes del backend
interface MessageResponse {
  success: boolean;
  messages: Message[];
}

interface Message {
  _id: string;
  name: string;
  email: string;
  subject?: string;
  message: string;
  isRead: boolean;
  status?: string;
  createdAt: string;
}
---

<AdminLayout title="Gestión de Mensajes">
  <div class="space-y-6">
    <!-- Cabecera con gradiente -->
    <div class="bg-gradient-to-r from-blue-600 to-indigo-700 rounded-xl p-6 shadow-lg">
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-2xl font-bold text-white">Gestión de Mensajes</h1>
          <p class="text-blue-100 mt-1">Administra los mensajes recibidos de tus clientes</p>
        </div>
        <div class="flex gap-2">
          <button class="bg-white text-blue-700 hover:bg-blue-50 px-4 py-2 rounded-lg font-medium transition-all shadow-sm" id="btnTodos">
            Todos los mensajes
          </button>
          <button class="bg-blue-800 text-white hover:bg-blue-900 px-4 py-2 rounded-lg font-medium transition-all shadow-sm" id="btnNoLeidos">
            No leídos
          </button>
        </div>
      </div>
    </div>

    <div id="loadingSpinner" class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600"></div>
      <span class="ml-3 text-gray-600 dark:text-gray-300">Cargando mensajes...</span>
    </div>

    <div id="messageContainer" class="hidden">
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700">
          <div class="flex items-center">
            <div class="relative flex-grow">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                </svg>
              </div>
              <input type="text" id="searchMessages" class="pl-10 block w-full p-2.5 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Buscar mensajes...">
            </div>
          </div>
        </div>
        
        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-300">
            <tr>
              <th scope="col" class="px-6 py-3">REMITENTE</th>
              <th scope="col" class="px-6 py-3">ASUNTO</th>
              <th scope="col" class="px-6 py-3">FECHA</th>
              <th scope="col" class="px-6 py-3">ESTADO</th>
              <th scope="col" class="px-6 py-3 text-right">ACCIONES</th>
            </tr>
          </thead>
          <tbody id="messagesTableBody">
            <!-- Los mensajes se cargarán aquí dinámicamente -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Modal mejorado -->
  <div id="messageModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
      <!-- Cabecera del modal con gradiente -->
      <div class="bg-gradient-to-r from-blue-600 to-indigo-700 px-6 py-4 rounded-t-xl flex items-center justify-between">
        <h3 class="text-xl font-semibold text-white">Detalles del Mensaje</h3>
        <button id="btnCloseX" class="text-white hover:text-blue-200 text-2xl font-bold transition-colors">&times;</button>
      </div>
      
      <!-- Cuerpo del modal -->
      <div class="p-6">
        <div class="space-y-4">
          <div class="flex">
            <div class="w-1/2">
              <p class="text-sm text-gray-500 dark:text-gray-400">De:</p>
              <p id="modalName" class="font-medium text-gray-900 dark:text-white"></p>
            </div>
            <div class="w-1/2">
              <p class="text-sm text-gray-500 dark:text-gray-400">Email:</p>
              <p id="modalEmail" class="font-medium text-blue-600 dark:text-blue-400"></p>
            </div>
          </div>
          <div class="flex">
            <div class="w-1/2">
              <p class="text-sm text-gray-500 dark:text-gray-400">Fecha:</p>
              <p id="modalDate" class="font-medium text-gray-900 dark:text-white"></p>
            </div>
            <div class="w-1/2">
              <p class="text-sm text-gray-500 dark:text-gray-400">Estado:</p>
              <p id="modalStatus" class="font-medium">
                <span class="px-2 py-1 rounded bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100">Nuevo</span>
              </p>
            </div>
          </div>
          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Asunto:</p>
            <p id="modalSubject" class="font-medium text-gray-900 dark:text-white"></p>
          </div>
          <div>
            <p class="text-sm text-gray-500 dark:text-gray-400">Mensaje:</p>
            <div id="modalMessage" class="mt-2 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg whitespace-pre-wrap text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600"></div>
          </div>
        </div>
      </div>
      
      <!-- Pie del modal -->
      <div class="border-t border-gray-200 dark:border-gray-700 px-6 py-4 flex justify-end gap-2">
        <button id="btnMarkAsRead" class="bg-gradient-to-r from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 text-white py-2 px-4 rounded-lg transition-all shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
          Marcar como leído
        </button>
        <button id="btnDelete" class="bg-gradient-to-r from-red-500 to-red-700 hover:from-red-600 hover:to-red-800 text-white py-2 px-4 rounded-lg transition-all shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
          Eliminar
        </button>
        <button id="btnCloseModal" class="bg-gradient-to-r from-gray-500 to-gray-700 hover:from-gray-600 hover:to-gray-800 text-white py-2 px-4 rounded-lg transition-all shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
          Cerrar
        </button>
      </div>
    </div>
  </div>

  <!-- Sistema de notificaciones tipo toast -->
  <div id="toastContainer" class="toast-container"></div>
</AdminLayout>

<style>
  /* Estilos para las notificaciones toast */
  .toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 2000;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .toast {
    padding: 1rem;
    border-radius: 0.75rem;
    width: 300px;
    background-color: white;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    animation: slideIn 0.3s ease-in-out;
  }

  .toast-success {
    border-left: 4px solid #10B981;
  }

  .toast-error {
    border-left: 4px solid #EF4444;
  }

  .toast-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .toast-body {
    margin-bottom: 0.5rem;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
</style>

<script>
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:5000';
// Definimos tipos para las variables globales
let currentMessages: Message[] = [];
let selectedMessageId: string | null = null;

// Definimos la interfaz para los mensajes
interface Message {
  _id: string;
  name: string;
  email: string;
  subject?: string;
  message: string;
  isRead: boolean;
  status?: string;
  createdAt: string;
}

// Función para verificar autenticación
async function checkAuth(): Promise<boolean> {
  const token = localStorage.getItem('token');
  if (!token) {
    showToast('Error de autenticación', 'No has iniciado sesión. Serás redirigido al login.', 'error');
    setTimeout(() => {
      window.location.href = '/admin/login';
    }, 2000);
    return false;
  }

  try {
    const response = await fetch(`${API_URL}/users/profile`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'No autorizado');
    }

    const data = await response.json();
    if (!data.user.isAdmin) {
      showToast('Acceso denegado', 'No tienes permisos de administrador.', 'error');
      setTimeout(() => {
        window.location.href = '/admin';
      }, 2000);
      return false;
    }

    return true;
  } catch (error: unknown) {
    const err = error instanceof Error ? error : new Error('Error desconocido');
    showToast('Error de autenticación', err.message || 'Error al verificar credenciales', 'error');
    setTimeout(() => {
      localStorage.removeItem('token');
      window.location.href = '/admin/login';
    }, 2000);
    return false;
  }
}

// Función para mostrar notificaciones tipo toast
function showToast(title: string, message: string, type: 'success' | 'error' = 'success'): void {
  const toastContainer = document.getElementById('toastContainer');
  if (!toastContainer) return;
  
  // Crear el elemento toast
  const toast = document.createElement('div');
  toast.className = `toast toast-${type}`;
  
  // Crear el contenido del toast
  toast.innerHTML = `
    <div class="toast-header">
      <h4 class="${type === 'success' ? 'text-green-600' : 'text-red-600'} font-medium">${title}</h4>
      <button onclick="this.parentElement.parentElement.remove()">&times;</button>
    </div>
    <div class="toast-body">
      <p>${message}</p>
    </div>
  `;
  
  // Añadir el toast al contenedor
  toastContainer.appendChild(toast);
  
  // Eliminar automáticamente después de 3 segundos
  setTimeout(() => {
    toast.style.animation = 'fadeOut 0.5s ease-in-out forwards';
    setTimeout(() => {
      if (toast.parentNode === toastContainer) {
        toastContainer.removeChild(toast);
      }
    }, 500);
  }, 3000);
}

// Función para cargar mensajes
async function loadMessages(filter: 'todos' | 'no-leidos' = 'todos'): Promise<void> {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      showToast('Error de autenticación', 'No has iniciado sesión', 'error');
      return;
    }

    const loadingSpinner = document.getElementById('loadingSpinner');
    const messageContainer = document.getElementById('messageContainer');
    
    if (loadingSpinner) loadingSpinner.classList.remove('hidden');
    if (messageContainer) messageContainer.classList.add('hidden');

    const response = await fetch(`${API_URL}/messages`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error al cargar los mensajes');
    }

    const data = await response.json();
    
    // Verificar la estructura de la respuesta
    if (!data.success || !data.messages) {
      throw new Error('Formato de respuesta inválido');
    }
    
    currentMessages = data.messages;
    
    const tableBody = document.getElementById('messagesTableBody');
    if (!tableBody) return;
    
    tableBody.innerHTML = '';

    const filteredMessages = filter === 'no-leidos' 
      ? currentMessages.filter(msg => !msg.isRead)
      : currentMessages;

    if (filteredMessages.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-4 text-center">
            <div class="flex flex-col items-center justify-center py-6">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              <p class="text-gray-500 dark:text-gray-400">No hay mensajes para mostrar</p>
            </div>
          </td>
        </tr>
      `;
    } else {
      filteredMessages.forEach(message => {
        const row = document.createElement('tr');
        row.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors';
        
        // Formatear la fecha
        const date = new Date(message.createdAt).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        // Determinar el estado del mensaje
        const status = message.status || (message.isRead ? 'leído' : 'nuevo');
        const statusClass = message.isRead 
          ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' 
          : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100';

        row.innerHTML = `
          <td class="px-6 py-4 font-medium text-gray-900 dark:text-white">
            <div class="flex items-center">
              <div class="flex-shrink-0 h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                <span class="text-lg font-bold">${message.name.charAt(0).toUpperCase()}</span>
              </div>
              <div class="ml-4">
                <div class="font-medium">${message.name}</div>
                <div class="text-sm text-gray-500 dark:text-gray-400">${message.email}</div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4">
            ${message.subject || 'Sin asunto'}
          </td>
          <td class="px-6 py-4">
            <div class="text-sm">${date.split(',')[0]}</div>
            <div class="text-xs text-gray-500 dark:text-gray-400">${date.split(',')[1]}</div>
          </td>
          <td class="px-6 py-4">
            <span class="px-2 py-1 rounded-full text-xs font-medium ${statusClass}">
              ${status}
            </span>
          </td>
          <td class="px-6 py-4 text-right">
            <button class="view-message bg-blue-100 text-blue-700 hover:bg-blue-200 dark:bg-blue-700 dark:text-blue-100 dark:hover:bg-blue-600 px-3 py-1.5 rounded-lg transition-colors" data-id="${message._id}">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
              </svg>
              Ver
            </button>
          </td>
        `;

        tableBody.appendChild(row);
      });
    }

    if (loadingSpinner) loadingSpinner.classList.add('hidden');
    if (messageContainer) messageContainer.classList.remove('hidden');

    // Actualizar listeners después de cargar mensajes
    attachMessageListeners();
  } catch (error: unknown) {
    console.error('Error al cargar mensajes:', error);
    const err = error instanceof Error ? error : new Error('Error desconocido');
    showToast('Error', err.message || 'Error al cargar los mensajes', 'error');
    
    const loadingSpinner = document.getElementById('loadingSpinner');
    if (loadingSpinner) loadingSpinner.classList.add('hidden');
  }
}

// Función para ver detalles del mensaje
async function viewMessage(id: string): Promise<void> {
  try {
    console.log('Buscando mensaje con ID:', id);
    
    const message = currentMessages.find(m => m._id === id);
    if (!message) {
      showToast('Error', 'No se encontró el mensaje', 'error');
      return;
    }

    selectedMessageId = id;
    
    // Obtener referencias a los elementos del modal
    const modalName = document.getElementById('modalName');
    const modalEmail = document.getElementById('modalEmail');
    const modalSubject = document.getElementById('modalSubject');
    const modalMessage = document.getElementById('modalMessage');
    const modalDate = document.getElementById('modalDate');
    const modalStatus = document.getElementById('modalStatus');
    const messageModal = document.getElementById('messageModal');
    
    // Función para escapar HTML y prevenir XSS
    const escapeHTML = (str: string): string => {
      if (!str) return '';
      return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
    };
    
    // Asignar valores a los elementos del modal usando textContent para mayor seguridad
    if (modalName) modalName.textContent = message.name || '';
    if (modalEmail) modalEmail.textContent = message.email || '';
    if (modalSubject) modalSubject.textContent = message.subject || 'Sin asunto';
    
    // Para el mensaje, preservamos los saltos de línea
    if (modalMessage) {
      modalMessage.textContent = message.message || '';
    }
    
    if (modalDate) {
      try {
        const date = new Date(message.createdAt);
        // Verificar si la fecha es válida
        if (isNaN(date.getTime())) {
          throw new Error('Fecha inválida');
        }
        
        const formattedDate = date.toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        modalDate.textContent = formattedDate;
      } catch (e) {
        console.error('Error al formatear la fecha:', e);
        modalDate.textContent = message.createdAt || '';
      }
    }
    
    // Actualizar el estado en el modal
    if (modalStatus) {
      const status = message.status || (message.isRead ? 'leído' : 'nuevo');
      const statusClass = message.isRead 
        ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' 
        : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100';
      
      modalStatus.innerHTML = `<span class="px-2 py-1 rounded-full text-xs font-medium ${statusClass}">${status}</span>`;
    }

    // Mostrar el modal
    if (messageModal) {
      messageModal.classList.remove('hidden');
      console.log('Modal mostrado correctamente');
    } else {
      console.error('No se encontró el elemento del modal');
      showToast('Error', 'No se pudo mostrar el modal', 'error');
    }

    // Si el mensaje no está leído, marcarlo como leído silenciosamente
    if (!message.isRead) {
      await markAsRead(id, true); // Pasar true para indicar que es silencioso
    }
  } catch (error: unknown) {
    console.error('Error al mostrar el mensaje:', error);
    const err = error instanceof Error ? error : new Error('Error desconocido');
    showToast('Error', err.message, 'error');
  }
}

// Función para marcar mensaje como leído
async function markAsRead(id: string, silent: boolean = false): Promise<void> {
  try {
    const token = localStorage.getItem('token');
    const response = await fetch(`${API_URL}/messages/${id}/read`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error('Error al marcar el mensaje como leído');
    }

    // Actualizar la lista de mensajes
    await loadMessages();
    
    // Mostrar notificación solo si no es silencioso
    if (!silent) {
      // Cerrar el modal de mensaje
      closeMessageModal();
      
      // Mostrar notificación de éxito
      showToast('Éxito', 'Mensaje marcado como leído', 'success');
    }
  } catch (error: unknown) {
    const err = error instanceof Error ? error : new Error('Error desconocido');
    showToast('Error', err.message, 'error');
  }
}

// Función para eliminar mensaje
async function deleteMessage(id: string): Promise<void> {
  try {
    const token = localStorage.getItem('token');
    const response = await fetch(`${API_URL}/messages/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error('Error al eliminar el mensaje');
    }

    // Cerrar el modal de mensaje
    closeMessageModal();
    
    // Actualizar la lista de mensajes
    await loadMessages();
    
    // Mostrar notificación de éxito
    showToast('Éxito', 'Mensaje eliminado correctamente', 'success');
  } catch (error: unknown) {
    const err = error instanceof Error ? error : new Error('Error desconocido');
    showToast('Error', err.message, 'error');
  }
}

// Función para cerrar el modal de mensaje
function closeMessageModal(): void {
  try {
    const messageModal = document.getElementById('messageModal');
    if (!messageModal) {
      console.error('No se encontró el elemento del modal para cerrarlo');
      return;
    }
    
    // Ocultar el modal
    messageModal.classList.add('hidden');
    console.log('Modal cerrado correctamente');
    
    // Resetear el ID del mensaje seleccionado
    selectedMessageId = null;
  } catch (error) {
    console.error('Error al cerrar el modal:', error);
  }
}

// Event Listeners
function attachMessageListeners(): void {
  document.querySelectorAll('.view-message').forEach(button => {
    button.addEventListener('click', () => {
      // Aseguramos que button es un HTMLElement con dataset
      if (button instanceof HTMLElement && button.dataset && button.dataset.id) {
        viewMessage(button.dataset.id);
      }
    });
  });
}

document.addEventListener('DOMContentLoaded', async () => {
  // Verificar autenticación primero
  const isAuthenticated = await checkAuth();
  if (!isAuthenticated) return;

  // Cargar mensajes
  await loadMessages();

  // Botones de filtro
  const btnTodos = document.getElementById('btnTodos');
  const btnNoLeidos = document.getElementById('btnNoLeidos');
  
  if (btnTodos) {
    btnTodos.addEventListener('click', () => loadMessages('todos'));
  }
  
  if (btnNoLeidos) {
    btnNoLeidos.addEventListener('click', () => loadMessages('no-leidos'));
  }

  // Botones del modal de mensaje
  const btnDelete = document.getElementById('btnDelete');
  if (btnDelete) {
    btnDelete.addEventListener('click', () => {
      if (selectedMessageId) {
        deleteMessage(selectedMessageId);
      }
    });
  }

  const btnMarkAsRead = document.getElementById('btnMarkAsRead');
  if (btnMarkAsRead) {
    btnMarkAsRead.addEventListener('click', () => {
      if (selectedMessageId) {
        markAsRead(selectedMessageId);
      }
    });
  }

  // Cerrar modales con botones de cierre
  const btnCloseX = document.getElementById('btnCloseX');
  if (btnCloseX) {
    btnCloseX.addEventListener('click', closeMessageModal);
  }
  
  // Botón de cerrar en el footer del modal
  const btnCloseModal = document.getElementById('btnCloseModal');
  if (btnCloseModal) {
    btnCloseModal.addEventListener('click', closeMessageModal);
  }

  // Cerrar modales al hacer clic fuera del contenido
  const messageModal = document.getElementById('messageModal');
  if (messageModal) {
    messageModal.addEventListener('click', (e) => {
      // Si el clic fue directamente en el fondo del modal (no en su contenido)
      if (e.target === messageModal) {
        console.log('Clic fuera del contenido del modal');
        closeMessageModal();
      }
    });
  }

  // Añadir listener para la tecla Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      console.log('Tecla Escape presionada');
      closeMessageModal();
    }
  });

  // Búsqueda de mensajes
  const searchInput = document.getElementById('searchMessages');
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      // Aseguramos que e.target es un HTMLInputElement
      const target = e.target as HTMLInputElement;
      const searchTerm = target.value.toLowerCase();
      
      const filteredMessages = currentMessages.filter(message => 
        message.name.toLowerCase().includes(searchTerm) ||
        message.email.toLowerCase().includes(searchTerm) ||
        message.message.toLowerCase().includes(searchTerm) ||
        (message.subject && message.subject.toLowerCase().includes(searchTerm))
      );

      const tableBody = document.getElementById('messagesTableBody');
      if (!tableBody) return;
      
      tableBody.innerHTML = '';
      
      if (filteredMessages.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="5" class="px-6 py-4 text-center">
              No se encontraron mensajes
            </td>
          </tr>
        `;
        return;
      }
      
      filteredMessages.forEach(message => {
        const row = document.createElement('tr');
        row.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700';
        
        const date = new Date(message.createdAt).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        const status = message.status || (message.isRead ? 'leído' : 'nuevo');
        const statusClass = message.isRead ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';

        row.innerHTML = `
          <td class="px-6 py-4 font-medium text-gray-900 dark:text-white">
            ${message.name}
          </td>
          <td class="px-6 py-4">
            ${message.subject || 'Sin asunto'}
          </td>
          <td class="px-6 py-4">
            ${date}
          </td>
          <td class="px-6 py-4">
            <span class="px-2 py-1 rounded ${statusClass}">
              ${status}
            </span>
          </td>
          <td class="px-6 py-4">
            <button class="view-message text-blue-600 hover:text-blue-900" data-id="${message._id}">
              Ver
            </button>
          </td>
        `;

        tableBody.appendChild(row);
      });
      
      attachMessageListeners();
    });
  }
});
</script> 