---
import { API_URL } from '../api/config';

// Obtener la configuración actual
let config;
try {
  // Usar la URL correcta dependiendo del entorno
  const configUrl = typeof window === 'undefined' 
    ? 'http://localhost:5000/api/config'
    : '/api/config';
    
  console.log('Obteniendo configuración desde:', configUrl);
  
  const response = await fetch(configUrl, {
    headers: {
      'Cache-Control': 'no-cache, no-store, must-revalidate',
      'Pragma': 'no-cache'
    }
  });
  config = await response.json();
  console.log('Configuración obtenida:', config);
} catch (error) {
  console.error('Error al cargar la configuración:', error);
  config = { modoMantenimiento: false, mensajeMantenimiento: 'No se pudo cargar la configuración' };
}
---

<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Prueba de Modo Mantenimiento</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h1 {
      color: #4f46e5;
      margin-bottom: 1.5rem;
    }
    .card {
      background-color: #f9fafb;
      border-radius: 0.5rem;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .status {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 9999px;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    .status.active {
      background-color: #dcfce7;
      color: #166534;
    }
    .status.inactive {
      background-color: #fee2e2;
      color: #b91c1c;
    }
    button {
      background-color: #4f46e5;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      cursor: pointer;
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
    }
    button:hover {
      background-color: #4338ca;
    }
    .message {
      margin-top: 1rem;
      padding: 1rem;
      border-radius: 0.25rem;
      background-color: #f3f4f6;
      border-left: 4px solid #4f46e5;
    }
    .notification {
      position: fixed;
      top: 1rem;
      right: 1rem;
      padding: 1rem;
      border-radius: 0.25rem;
      background-color: #dcfce7;
      color: #166534;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      transform: translateY(-100%);
      opacity: 0;
      transition: all 0.3s ease;
    }
    .notification.show {
      transform: translateY(0);
      opacity: 1;
    }
    .notification.error {
      background-color: #fee2e2;
      color: #b91c1c;
    }
  </style>
</head>
<body>
  <h1>Prueba de Modo Mantenimiento</h1>
  
  <div class="card">
    <h2>Estado Actual</h2>
    <div class="status" class:list={[config.modoMantenimiento ? 'active' : 'inactive']}>
      Modo Mantenimiento: {config.modoMantenimiento ? 'ACTIVO' : 'INACTIVO'}
    </div>
    
    <div class="message">
      <strong>Mensaje de mantenimiento:</strong>
      <p>{config.mensajeMantenimiento || 'No hay mensaje configurado'}</p>
    </div>
  </div>
  
  <div class="card">
    <h2>Controles</h2>
    <button id="toggleMaintenance">
      {config.modoMantenimiento ? 'Desactivar' : 'Activar'} Modo Mantenimiento
    </button>
    <button id="refreshPage">Refrescar Página</button>
    <button id="goToHome">Ir a Página Principal</button>
  </div>
  
  <div id="notification" class="notification">
    <span id="notificationText"></span>
  </div>
  
  <script define:vars={{ config }}>
    // Función para mostrar notificaciones
    function showNotification(message, isError = false) {
      const notification = document.getElementById('notification');
      const notificationText = document.getElementById('notificationText');
      
      if (notification && notificationText) {
        notification.classList.toggle('error', isError);
        notificationText.textContent = message;
        notification.classList.add('show');
        
        setTimeout(() => {
          notification.classList.remove('show');
        }, 3000);
      }
    }
    
    // Función para alternar el modo mantenimiento
    async function toggleMaintenance() {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          showNotification('No hay token de autenticación. Inicia sesión primero.', true);
          return;
        }
        
        // Invertir el estado actual
        const updatedConfig = {
          ...config,
          modoMantenimiento: !config.modoMantenimiento
        };
        
        console.log('Enviando actualización:', updatedConfig);
        
        const response = await fetch('/api/config', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache'
          },
          body: JSON.stringify(updatedConfig)
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Error: ${response.status} - ${errorText}`);
        }
        
        const result = await response.json();
        console.log('Respuesta recibida:', result);
        
        showNotification(`Modo mantenimiento ${updatedConfig.modoMantenimiento ? 'activado' : 'desactivado'} correctamente`);
        
        // Esperar un momento y refrescar la página
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } catch (error) {
        console.error('Error:', error);
        showNotification(error instanceof Error ? error.message : String(error), true);
      }
    }
    
    // Configurar eventos
    const toggleBtn = document.getElementById('toggleMaintenance');
    if (toggleBtn) {
      toggleBtn.addEventListener('click', toggleMaintenance);
    }
    
    const refreshBtn = document.getElementById('refreshPage');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => window.location.reload());
    }
    
    const homeBtn = document.getElementById('goToHome');
    if (homeBtn) {
      homeBtn.addEventListener('click', () => window.location.href = '/');
    }
  </script>
</body>
</html> 